-----------------------
A-4 Arrays and Pointers
-----------------------
OUTPUT CFG FILE
------------------
int main()                             |
{                                      |;; Function main (main, funcdef_no=0, d
    int a[3];                          |ecl_uid=1910, cgraph_uid=1, symbol_orde
    int b[] = {1, 2, 3};               |r=0)
    int i, *p;                         |
    for (i=0; i<3; i++) {              |;; 2 loops found
        a[i] = b[i];                   |;;
    }                                  |;; Loop 0
    p = a;                             |;;  header 0, latch 1
    *(p + 2) = 5;                      |;;  depth 0, outer -1
}                                      |;;  nodes: 0 1 2 3 4 5 6
                                       |;;
~                                      |;; Loop 1
~                                      |;;  header 4, latch 3
~                                      |;;  depth 1, outer 0
~                                      |;;  nodes: 4 3
~                                      |;; 2 succs { 4 }
~                                      |;; 3 succs { 4 }
~                                      |;; 4 succs { 3 5 }
~                                      |;; 5 succs { 6 }
~                                      |;; 6 succs { 1 }
~                                      |main ()
~                                      |{
~                                      |  int * p;
~                                      |  int i;
~                                      |  int b[3];
~                                      |  int a[3];
A-4.c                                   A-4.c.012t.cfg                         





Answers
--------
	1 In cfg the array declaration is represented by the name which hold 	  this array with the number of
	   of elements in that array whereas in C file it is represented by 		   stating the elements which are in the
	   array
	   Eg - int b[ ] = {1, 2, 3}; is represented as int b[3]; 
                     This is to remain consistent with GIMPLE's one 			operation per statement policy.

        2   As GIMPLE perform only one operation per statement, it cannot
            read and write to array locations at the same time (as array
            accesses involve offset calculation). Thus, these are split into
            separate read and write statements by introducing a temporary.

        3   CLOBBER statements are used for  address-escaped variables. It 		     is an annotation  to  signify  that  the  scope  of  this  		     address-escaped variable has ended.    	  
