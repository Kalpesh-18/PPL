-----------------------------
A-5 Static Single Assignment
-----------------------------
OUTPUT CFG FILE
---------------

int main()                             |
{                                      |;; Function main (main, funcdef_no=0, d
    int a, b, c, d;                    |ecl_uid=1910, cgraph_uid=1, symbol_orde
                                       |r=0)
    d = 10;                            |
    if (c > d) {                       |;; 1 loops found
        a = 3;                         |;;
        b = 2;                         |;; Loop 0
    } else {                           |;;  header 0, latch 1
        a = 2;                         |;;  depth 0, outer -1
        b = 3;                         |;;  nodes: 0 1 2 3 4 5 6
    }                                  |;; 2 succs { 3 4 }
                                       |;; 3 succs { 5 }
    c = a + b;                         |;; 4 succs { 5 }
}                                      |;; 5 succs { 6 }
                                       |;; 6 succs { 1 }
~                                      |main ()
~                                      |{
~                                      |  int d;
~                                      |  int c;
~                                      |  int b;
~                                      |  int a;
~                                      |  int D.1920;
~                                      |
~                                      |  <bb 2> :
~                                      |  d = 10;
~                                      |  if (c > d)
A-5.c                                   A-5.c.012t.cfg                         


Answer
-----------
        1   Local variables are  suffixed with a unique  number which 	     represents the assignment. For  example, `d_3' refers to the  		    usage of variable `d'  .Variables that are  likely to be used  		    before any assignment are suffixed  with `(D)' to indicate  	      that the assignment was implicit in the declaration.  This 	     happens to both uninitialized local variables and formal 	   parameters.  For example, variable `c' is
            used as `c_4(D)' in the `if' condition.

        2   A PHI node merges assignments from different paths and creates 		     a new assignment. For example:

                # a_1 = PHI <a_5(3), a_7(4)> 

            indicates that if  the control reaches here from basic  block 3 	   	    then use the  value of a_5;  otherwise if  the control reaches  		    here from basic block 4 then use the value of a_7.

        3   A switch statement can result in a merge of more than two paths 		    (and hence possibly more than two assignments). Consider:

            int main()
            {
                int a, b;
                switch (a)
                {
                    case 1:
                        b = 2;
                        break;
                    case 2:
                        b = 3;
                        break;
                    case 3:
                        b = 4;
                    case 4:
                        b = 5;
                        break;
                    case 5:
                    case 6:
                        b = 6;
                        break;
                    default:
                        b = 7;
                }
                return b;
            }
            
            In this case  the PHI node at  the end of the  switch statement 		    will merge multiple assignments such as:
            # b_1 = PHI <b_4(3), b_5(4), b_7(6), b_8(7), b_9(8)>
